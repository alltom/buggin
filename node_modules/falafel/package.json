{
  "name": "falafel",
  "description": "transform the ast on a recursive walk",
  "version": "0.1.0",
  "repository": {
    "type": "git",
    "url": "git://github.com/substack/node-falafel.git"
  },
  "main": "index.js",
  "keywords": [
    "ast",
    "source",
    "traversal",
    "syntax",
    "tree",
    "burrito"
  ],
  "directories": {
    "example": "example",
    "test": "test"
  },
  "scripts": {
    "test": "tap test/*.js"
  },
  "dependencies": {
    "esprima": "~0.9.9"
  },
  "devDependencies": {
    "tap": "~0.2.4"
  },
  "engines": {
    "node": ">=0.4.0"
  },
  "license": "MIT",
  "author": {
    "name": "James Halliday",
    "email": "mail@substack.net",
    "url": "http://substack.net"
  },
  "readme": "falafel\n=======\n\nTransform the [ast](http://en.wikipedia.org/wiki/Abstract_syntax_tree) on a\nrecursive walk.\n\n[![build status](https://secure.travis-ci.org/substack/node-falafel.png)](http://travis-ci.org/substack/node-falafel)\n\nThis module is like [burrito](https://github.com/substack/node-burrito),\nexcept that it uses [esprima](http://esprima.org) instead of\n[uglify](https://github.com/mishoo/UglifyJS)\nfor friendlier-looking ast nodes.\n\nexample\n=======\n\narray.js\n--------\n\nPut a function wrapper around all array literals.\n\n``` js\nvar falafel = require('falafel');\n\nvar src = '(' + function () {\n    var xs = [ 1, 2, [ 3, 4 ] ];\n    var ys = [ 5, 6 ];\n    console.dir([ xs, ys ]);\n} + ')()';\n\nvar output = falafel(src, function (node) {\n    if (node.type === 'ArrayExpression') {\n        node.update('fn(' + node.source() + ')');\n    }\n});\nconsole.log(output);\n```\n\noutput:\n\n```\n(function () {\n    var xs = fn([ 1, 2, fn([ 3, 4 ]) ]);\n    var ys = fn([ 5, 6 ]);\n    console.dir(fn([ xs, ys ]));\n})()\n```\n\nmethods\n=======\n\n``` js\nvar falafel = require('falafel')\n```\n\nfalafel(src, fn)\n----------------\n\nTransform the string source `src` with the function `fn`, returning a\nstring-like transformed output object.\n\nFor every node in the ast, `fn(node)` fires. The recursive walk is a\npre-traversal, so children get called before their parents.\n\nPerforming a pre-traversal makes it easier to write nested transforms since\ntransforming parents often requires transforming all its children first.\n\nThe return value is string-like (it defines `.toString()` and `.inspect()`) so\nthat you can call `node.update()` asynchronously after the function has\nreturned and still capture the output.\n\nIf `typeof src === 'object'`, then `src.source` will be used for the source and\nthe rest of the options will be passed directly along to esprima except for\n`'range'` which is always turned on because falafel needs it.\n\nSome of the options you might want from esprima includes:\n`'loc'`, `'raw'`, `'comments'`, `'tokens'`, and `'tolerant'`.\n\nnodes\n=====\n\nAside from the regular [esprima](http://esprima.org) data, you can also call\nsome inserted methods on nodes.\n\nAside from updating the current node, you can also reach into sub-nodes to call\nupdate functions on children from parent nodes.\n\nnode.source()\n-------------\n\nReturn the source for the given node, including any modifications made to\nchildren nodes.\n\nnode.update(s)\n--------------\n\nTransform the source for the present node to the string `s`.\n\nnode.parent\n-----------\n\nReference to the parent element or `null` at the root element.\n\ninstall\n=======\n\nWith [npm](http://npmjs.org) do:\n\n```\nnpm install falafel\n```\n\nlicense\n=======\n\nMIT\n",
  "_id": "falafel@0.1.0",
  "dist": {
    "shasum": "98d2c5aad0f3b100ea571471d0afc2b3d623e506"
  },
  "_from": "falafel"
}
